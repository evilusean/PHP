# starts a php webserver in terminal:
php -S localhost:4000
php artisan serve --host=0.0.0.0 --port=8000 #starts a server without having to change any firewall settings
npm run dev #starts a server for localhost using npm
composer run dev # starts a server using composer
'php artisan tinker' is a command-line utility that provides a powerful REPL (Read-Eval-Print Loop) for interacting with your Laravel application and its Eloquent models from the terminal.

# Server & Environment :
php artisan serve = Starts a local development server at http://localhost:8000. This is the easiest way to run and test your application without configuring a separate web server.
php artisan down = Puts the application into maintenance mode, displaying a temporary "Be right back" page to all visitors.
php artisan up = Brings the application out of maintenance mode.
php artisan storage:link = Creates a symbolic link from public/storage to storage/app/public, which is necessary for serving publicly accessible files (like user uploads).

# Database & Migrations
php artisan migrate = Runs all pending migrations to update your database schema.
php artisan migrate:rollback = Rolls back the last batch of migrations. This is useful for undoing a mistake.
php artisan migrate:status = Shows a list of all migrations and whether they have been run.
php artisan db:seed = Runs all database seeders to populate your database with initial data.
php artisan migrate:fresh = Drops all tables from the database and then re-runs all migrations. This is a quick way to reset your database.
php artisan tinker = Opens a powerful command-line interface for interacting with your application, models, and database.

# Caches & Optimization :
php artisan route:cache = Creates a cache file for your routes, significantly speeding up route registration for production environments.
php artisan route:clear = Clears the route cache file. You'll need to run this when adding new routes.
php artisan config:cache = Creates a cache file for your configuration, speeding up the application.
php artisan config:clear = Clears the configuration cache.
php artisan view:cache = Compiles all Blade views for faster rendering in production.
php artisan view:clear = Clears the compiled view cache.

# Code Generation (Make Commands) :
php artisan make:model <ModelName> = Creates a new Eloquent model file.
php artisan make:controller <ControllerName> = Creates a new controller file to handle web requests.
php artisan make:migration <MigrationName> = Creates a new migration file for database schema changes.
php artisan make:seeder <SeederName> = Creates a new seeder class to populate the database.
php artisan make:factory <FactoryName> = Creates a new model factory for generating fake data.
php artisan make:middleware <MiddlewareName> = Creates a new middleware class to filter HTTP requests.

=====================================================================================ERROR FIX================================================================================================================
https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-22-04
  #got an error when compiling, ran below to fix
  curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
  sudo apt-get install -y nodejs
  #had to install another program, nvm node version manager
  sudo apt install curl
  curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash 
  #check versions of node to install, install through nvm allows you to get a newer version on ubuntu, automatically installs 12.22 for some reason instead of latest
  #ERROR MESSAGE : ERROR: npm v10.2.4 is known not to run on Node.js v12.22.9.  This version of npm supports the following node versions: `^18.17.0 || >=20.5.0`.
nvm list-remote #lists all available versions NVM can install, need above 14 to run 'npm run dev'
nvm install v20.11.1 #installed version
nvm list #This shows the currently active version on the first line
Further TroubleShooting======================================================================================================================================================================================
sudo apt remove nodejs #You can uninstall Node.js using apt or nvm, depending on how it was installed. To remove the version from the system repositories, use apt remove
sudo apt purge nodejs #By default, apt remove retains any local configuration files that were created since install. If you don’t want to save the configuration files for later use, use apt purge
nvm current #To uninstall a version of Node.js that you installed using nvm, first determine whether it is the current active version:
nvm uninstall node_version #how to uninstall with nvm, replace node_version with what you want to remove
nvm deactivate # If the version you would like to remove is the current active version, you’ll first need to deactivate nvm to enable your changes:
FIXED: 'npm run dev' WORKS ===================================================================================================================================================================================


























